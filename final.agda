module final where
open import Basics002

record ๐พ (element : Set) : Set where
  field
    size : โ
    op  : element โ element โ element
    ฮต   : element

--improper implementaion of subraction with Nats
_-_ : โ โ โ โ โ
Z - Z = Z
Z - S y = Z
S x - Z = S x
S x - S y = x - y

equal : โ โ โ โ ๐น
equal Z Z = I
equal Z (S y) = O
equal (S x) Z = O
equal (S x) (S y) = equal x y

mod : โ โ โ โ โ
mod x y with x โธ y | x โก? y
mod x y | Pos pos | I = 0
mod x y | Pos pos | O = {!!}
mod x y | NegS neg | l = x

_ : mod 5 3 โก 2
_ = โฏ

_ : mod 0 5 โก 0
_ = โฏ

_ : mod 10 5 โก 0
_ = โฏ

_ : mod 2 5 โก 2
_ = โฏ

--Constructs group with: element   =  1
--                       operation = {+}
g1 : ๐พ โ
g1 = record { op = ฮป x1 x2 โ x1 + x2 ; ฮต = 0 ; size = 1 }

--funtion to return order of a group
order : ๐พ โ โ โ
order record { size = size ; op = op ; ฮต = ฮต } = size

data Maybe {a} (A : Set a) : Set a where
  just    : (x : A) โ Maybe A
  nothing : Maybe A
  
is-just : โ {a} {A : Set a} โ Maybe A โ ๐น
is-just (just _) = I
is-just nothing  = O

is-nothing : โ {a} {A : Set a} โ Maybe A โ ๐น
is-nothing (just x) = O
is-nothing nothing = I

gcd2 : โ โ โ โ โ
gcd2 x y with (mod x y) โก? 0
gcd2 x y | I = {!mod 5 3 โก? 0!}
gcd2 x y | O with mod x y
โฆ | H with (mod y (y - H)) โก? 0
gcd2 x y | O | H | I = H
gcd2 x y | O | H | O = H

gcd : โ โ โ โ โ
gcd x y with x โค? y
--TODO:
gcd x y | [โค] = gcd2 y x
gcd x y | [>] = gcd2 x y

--gcd test
_ : gcd 5 10 โก 5
_ = โฏ
_ : gcd 5 3 โก 1
_ = โฏ

coprime : โ โ โ โ ๐น
coprime x y = {!!}
{-
17 โ โคโโ โ (2,3) โ โคโ ร โคโ
-}
--CRT : 

--tests
_ : order g1 โก 1
_ = โฏ
