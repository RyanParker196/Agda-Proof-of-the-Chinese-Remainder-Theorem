module final where
open import Basics002

record 𝔾 (element : Set) : Set where
  field
    size : ℕ
    op  : element → element → element
    ε   : element
_-_ : ℕ → ℕ → ℕ
Z - Z = Z
Z - S y = Z
S x - Z{!!}S x? - S y = {!!}

mod : ℕ → ℕ → ℕ
mod x y with x ∸ y
mod x y | Pos pos = {!y  (x × pos)!}
mod x y | NegS neg = {!!}



--identity : ∀ (s : ℕ) → (op : ℕ → ℕ → ℕ) → ℕ
--identity s op = s

--Constructs group with: element   =  1
--                       operation = {+}
g1 : 𝔾 ℕ
g1 = record { op = λ x1 x2 → x1 + x2 ; ε = 0 ; size = 1 }

--funtion to return order of a group
order : 𝔾 ℕ → ℕ
order record { size = size ; op = op ; ε = ε } = size

--tests
_ : let g = g1
    in order g1 ≡ 1
_ = ↯
